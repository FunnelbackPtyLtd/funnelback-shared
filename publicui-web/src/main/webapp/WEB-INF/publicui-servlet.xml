<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd

				http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd">

	<import resource="spring/freemarker.xml"/>
	<import resource="spring/search-lifecycle.xml"/>
	
	<context:component-scan base-package="com.funnelback.publicui.search.web,com.funnelback.publicui.search.lifecycle" />
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager" />

	<bean class="org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver" />

	<mvc:interceptors>
            <mvc:interceptor>
            <mvc:mapping path="/cart.*" />
            <mvc:mapping path="/search.*" />
            <bean class="org.springframework.orm.jpa.support.OpenEntityManagerInViewInterceptor">
                <property name="persistenceUnitName" value="search-session" />
            </bean>
        </mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/search.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.SearchLogInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/search.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.AccessRestrictionInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/search.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.SessionInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/cache.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.DenyIfDlsIsOnInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/anchors.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.AccessRestrictionInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/content-optimiser/*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.AccessRestrictionInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/anchors.*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.DenyIfDlsIsOnInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/content-optimiser/*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.DenyIfDlsIsOnInterceptor" />
		</mvc:interceptor>
		<mvc:interceptor>
			<mvc:mapping path="/content-optimiser/*" />
			<bean class="com.funnelback.publicui.search.web.interceptors.ContentOptimiserRestrictionInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>

	<bean id="xmlMarshaller" class="com.funnelback.publicui.xml.SearchXStreamMarshaller">
		<property name="encoding" value="UTF-8" />
		<property name="autodetectAnnotations" value="true" />
	</bean>

	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="favorPathExtension" value="true" />
		<property name="ignoreAcceptHeader" value="true" />
		<property name="defaultContentType" value="text/html" />
		<property name="mediaTypes">
			<props>
				<prop key="xml">application/xml</prop>
				<prop key="json">application/json</prop>
				<prop key="classic">text/xml-classic</prop>
			</props>
		</property>
	</bean>

	<bean id="fallbackFreemarkerViewResolver" class="com.funnelback.publicui.search.web.views.freemarker.FallbackFreeMarkerViewResolver">
		<constructor-arg name="fallbackViewUrl"><value>web/templates/modernui/form-not-found</value></constructor-arg>
		<constructor-arg name="defaultSuffix"><value>.default</value></constructor-arg>
		
		<property name="cache" value="true" />
		<property name="cacheUnresolved" value="false" />
		<property name="prefix" value="" />
		<property name="suffix" value=".ftl" />
		<property name="contentType" value="text/html;charset=UTF-8" />
		<property name="viewClass" value="com.funnelback.publicui.search.web.views.freemarker.CustomisableFreeMarkerFormView" />
	</bean>
	
	<bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<property name="contentNegotiationManager" ref="contentNegotiationManager" />
		<property name="viewResolvers">
			<list>
				<ref bean="fallbackFreemarkerViewResolver" />
			</list>
		</property>
		<property name="defaultViews">
			<list>
				<bean id="jsonView" class="com.funnelback.publicui.search.web.views.json.MappingJacksonJsonpView">
					<property name="renderedAttributes" value="#{T(com.funnelback.publicui.search.web.controllers.SearchController$ModelAttributes).getNames()}" />
					<property name="callbackParameterName" value="callback" />
					<property name="objectMapper" ref="jacksonObjectMapper" />
				</bean>

				<bean id="xmlView" class="org.springframework.web.servlet.view.xml.MarshallingView">
					<constructor-arg ref="xmlMarshaller" />
					<property name="contentType" value="application/xml;charset=UTF-8" />
					<property name="modelKey"
						value="#{T(com.funnelback.publicui.search.web.controllers.SearchController$ModelAttributes).SearchTransaction.toString()}" />
				</bean>

				<bean id="classicView" class="com.funnelback.publicui.search.web.views.XSLTXStreamView">
					<constructor-arg value="classpath:funnelback-classic.xsl" />
					<property name="modelKey" value="#{T(com.funnelback.publicui.search.web.controllers.SearchController$ModelAttributes).SearchTransaction.toString()}" />
					<property name="marshaller" ref="xmlMarshaller" />
					<property name="cacheXslt" value="true" />
					<property name="contentType" value="text/xml-classic" />
				</bean>

			</list>
		</property>
	</bean>

	<bean id="jacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
	<bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
		factory-bean="jacksonObjectMapper" factory-method="getSerializationConfig" />
	
	<bean
	    class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
	    <property name="targetObject" ref="jacksonSerializationConfig" />
	    <property name="targetMethod" value="setSerializationInclusion" />
	    <property name="arguments">
	        <list>
	            <value type="org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion">#{ appProperties['json.inclusion'] }</value>
	        </list>
	    </property>
	</bean>	
	
	<bean class="com.funnelback.publicui.xml.padre.StaxStreamParser" />	
			
	<mvc:resources mapping="/content-optimiser/**" location="/content-optimiser/" />
		
</beans>