<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oxm="http://www.springframework.org/schema/oxm" xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:util="http://www.springframework.org/schema/util" xmlns:lang="http://www.springframework.org/schema/lang"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
				http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm-3.2.xsd
				http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
				http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
				http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
				http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.2.xsd
				http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<import resource="spring/jmx.xml"/>
	
	<context:component-scan base-package="com.funnelback.publicui.i18n,com.funnelback.publicui.log,com.funnelback.publicui.search.service,com.funnelback.publicui.xml,com.funnelback.contentoptimiser,com.funnelback.publicui.search.service.anchors,com.funnelback.utils,com.funnelback.publicui.utils.web" />
	
	<task:annotation-driven executor="taskExecutor" />
	<task:executor id="taskExecutor" pool-size="100" rejection-policy="DISCARD" />

	<util:properties id="appProperties" location="file:${funnelback.installdir}/web/conf/modernui/modernui.properties" />

	<bean id="searchHome" class="java.io.File">
		<constructor-arg index="0" type="java.lang.String" value="#{ systemProperties['funnelback.installdir'] }" />
	</bean>
	
	<bean id="globalFunnelbackConfig" class="com.funnelback.common.config.GlobalOnlyConfig">
		<constructor-arg ref="searchHome"></constructor-arg>
	</bean>

	<bean id="appCacheManager" class="net.sf.ehcache.CacheManager">
		<constructor-arg index="0" type="java.net.URL"
			value="classpath:ehcache.xml" />
	</bean>
	
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>i18n/errors</value>
				<value>i18n/content-optimiser</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage"><value>true</value></property>
	</bean>
	
	<bean id="RequestParametersTransformFilter" class="com.funnelback.publicui.search.web.filters.RequestParametersTransformFilter" />
	<bean id="HostnameRestrictionFilter" class="com.funnelback.publicui.search.web.filters.HostnameRestrictionFilter" />	
	<bean id="ConfigurableSecurityFilter" class="com.funnelback.publicui.search.web.filters.ConfigurableSecurityFilter" />
	
	<bean class="org.apache.commons.pool.impl.GenericKeyedObjectPool" destroy-method="close">
		<constructor-arg index="0">
			<bean class="com.funnelback.publicui.search.lifecycle.data.fetchers.padre.pool.PadreConnectionFactory" />
		</constructor-arg>
	</bean>

	<!-- Redis setup to store search history -->
	
	<bean id="defaultRedisSerializer" class="org.springframework.data.redis.serializer.JacksonJsonRedisSerializer">
		<constructor-arg value="#{T(com.funnelback.publicui.search.model.transaction.usertracking.SearchHistory)}" />
	</bean>
	<bean id="stringRedisSerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer" />
	
	<bean id="jedisReadConnectionFactory"
	 	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
	 	p:password="#{T(com.funnelback.common.Security).generateSystemPassword(T(com.funnelback.common.Security$System).REDIS, globalFunnelbackConfig.value('server_secret'))}"
	 	p:host-name="localhost"
	 	p:port="#{new Integer(globalFunnelbackConfig.value('redis.slave.port'))}" />
	<bean id="redisReadTemplate" class="org.springframework.data.redis.core.RedisTemplate"
	 	p:connection-factory-ref="jedisReadConnectionFactory"
	 	p:default-serializer-ref="defaultRedisSerializer"
	 	p:key-serializer-ref="stringRedisSerializer" />
	
	<bean id="jedisWriteConnectionFactory"
	 	class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
	 	p:password="#{T(com.funnelback.common.Security).generateSystemPassword(T(com.funnelback.common.Security$System).REDIS, globalFunnelbackConfig.value('server_secret'))}"
	 	p:host-name="#{globalFunnelbackConfig.value('redis.master.host')}"
		p:port="#{new Integer(globalFunnelbackConfig.value('redis.master.port'))}" />
	<bean id="redisWriteTemplate" class="org.springframework.data.redis.core.RedisTemplate"
	 	p:connection-factory-ref="jedisWriteConnectionFactory"
	 	p:default-serializer-ref="defaultRedisSerializer"
	 	p:key-serializer-ref="stringRedisSerializer" />
	
	<!-- End Redis setup -->

	
</beans>