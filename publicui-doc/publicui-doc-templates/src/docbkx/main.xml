<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book [
<!ENTITY engine-jsp SYSTEM "engines/jsp/main.xml">
<!ENTITY engine-purejs SYSTEM "engines/pure-js/main.xml">
]>
<book xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
	xmlns:xlink="http://www.w3.org/TR/xlink"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xi="http://www.w3.org/2001/XInclude" 
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">

	<info>
		<title>Templating engines investigation</title>

		<productname>Funnelback Public UI</productname>

		<releaseinfo>2011</releaseinfo>

		<mediaobject>
			<imageobject role="xhtml">
				<imagedata align="center" fileref="fb-logo.png" format="PNG" />
			</imageobject>
		</mediaobject>

		<authorgroup>
			<author>
				<personname>
					<firstname>Nicolas</firstname>
					<surname>Guillaumin</surname>
				</personname>
				<email>nguillaumin@funnelback.com</email>
			</author>
		</authorgroup>

		<copyright>
			<year>2011</year>
			<holder>Funnelback</holder>
		</copyright>

	</info>

	<toc />
	
	<preface xml:id="introduction">
		<title>Foreword</title>
		
		<para>
			The new Public UI is written in Java for various reason, the main one being performance. Being written in Java means that we
			can't run Perl code anymore, so will need to come up with a replacement solution for form files (NickScript).  
		</para>
		
		<para>
			The first solution that comes to mind is to re-implement NickScript in Java. But it has some shortcomings:
			<simplelist>
				<member>
					The less code we have to develop and maintain, the better. There are already several generic template
					engine out there (Think <emphasis>Freemarker</emphasis> on the Java world, or <emphasis>Smarty</emphasis> for PHP).
					Why not try to integrate an existing template engine instead, and benefit of the existing features and support ? 
				</member>
				<member>
					Because NickScript implements its own tags, it's difficult to do things that aren't supported by the core tags: You
					either have to write your own plugin, or use <literal>EvalPerl</literal>,
				</member>
				<member>
					<literal>EvalPerl</literal> is an obvious security hole. For what I
					<ulink url="http://wiki.funnelback.com:8080/display/RnD/Public+UI+rewrite+-+the+EvalPerl+problem">observed</ulink>
					it's used mostly to do formatting. Our template engine should make data formatting easier, instead of relying
					on <literal>EvalPerl</literal>. On the other hand form developers will always need a way to evaluate some arbitrary
					code, so we must keep this feature but in a more secure way,
				</member>
				<member>
					The fixed tag order is a problem: You have to be aware of the tag execution order to do complex things in NickScript.
					(On the other hand if we have to re-implement it we'll probably remove this constraint).
				</member>
			</simplelist>
			
			Whereas re-implementing NickScript should be investigated, it's worth considering alternate solutions.			
		</para>
	</preface>
	
	<part>
		<title>Alternate solutions and general considerations</title>
		<xi:include href="alternate-solutions.xml" />
		<xi:include href="data-model.xml" />
		<xi:include href="criteria.xml" />
	</part>
	
	<part>

		<title>Specific template engines investigation</title>
		
		<xi:include href="engines/jsp/main.xml" />
		<xi:include href="engines/pure-js/main.xml" />
		<xi:include href="engines/json-template/main.xml" />
		<xi:include href="engines/google-closure/main.xml" />
	
	</part>
	
</book>
