<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
	xml:id="engine-jsp" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
	<title>Java Server Pages</title>
	
	<para>
		Using JSP has several advantages:
        <simplelist>
            <member>It's based on the Java technology we're familiar with,</member>
            <member>It's compiled by the webapp container as a Java class, which guarantees good performances as well as detailed compilation error messages,</member>
            <member>The syntax of the taglibs is very similar to NickScript tags: <code>&lt;prefix:Tag&gt;</code>. That means that we can imagine re-implement NickScript tags in Java, as taglibs, thus keeping a near-compatibility with existing form files</member>
        </simplelist>
	</para>

    <para>
        One drawback of using JSP is that it's impossible to have the webapp container compile a JSP which is outside of it's deployment directory, which is our case since the form files reside in each collection config directory. This mean that we have to copy the form files on-the-fly into the webapp to have them compiled, and detect any change in the form file to re-copy them.
    </para> 

    <para>
        But the major drawback of JSP is the security: As Perl it allows execution of arbitrary Java code, including file access code. It can be even worse because if there is any fatal error it will crash the whole JVM, including Jetty.
    </para>

    <para>
        The JVM provide a <emphasis>Security Manager</emphasis> to restrict permissions of certain classes. However it's difficult to setup: The default policy when the Security Manager is enabled is to deny every sensitive permission to everyone. That includes some permissions used by the Spring Framework on which the Public UI is based. That means that either:
        <simplelist>
            <member>The policies needs to be tweaked to allow the Spring Framework to work correctly, which could be tricky to achieve</member>
            <member>We grant every permission by default, but deny some for JSP files (File access, etc), which is not a good security practice: It's better to deny everything, and grant some, that to grant everything and deny some</member>
        </simplelist>
    </para>

    <para>
        For these reasons I gave up on making a POC with JSP.
    </para>
		

</chapter>
