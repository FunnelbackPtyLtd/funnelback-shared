<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
	xml:id="engine-jsp" xmlns:xi="http://www.w3.org/2001/XInclude" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://docbook.org/ns/docbook http://www.docbook.org/xml/5.0/xsd/docbook.xsd">
	<title>Java Server Pages</title>

	<section>
		<title>Description</title>

		<para>
			JSP is the standard <quote>web view</quote> technology that comes with Java. It's a kind of templae engine that gets compiled at run time
			into a Java class. The first version was a messy mix of HTML + Java code snippet, such as:
			<programlisting language="jsp"><![CDATA[
<html>

...

<% for(int i=0; i<results.length; i++) {
	Result r = results[i]; %>
	<li>
		<title><%= r.getTitle() %></title>
	</li>
<% } %>

...

</html>
			]]>		
			</programlisting>
			
			It has improved in the following years using <emphasis>tag libraries</emphasis>, such as:
			<programlisting language="jsp"><![CDATA[
<html>

...

<c:forEach var="r" items="${results}">
	<li>
		<title>${r.title}</title>
	</li>
</c:forEach>

</html>
			]]></programlisting>
			
			The tag libraries are extensible, meaning that you can develop your own tags in Java with their own prefix and tag names, for instance
			<code>&lt;s:AfterSearchOnly&gt;...&lt;/s:AfterSearchOnly&gt;</code>.		
		</para>
	
		<para>
			Pros:
	        <simplelist>
	            <member>It's based on the Java technology we're familiar with,</member>
	            <member>It's compiled by the application server (Jetty) as a Java class, which guarantees good performances as well as detailed compilation error messages,</member>
	            <member>
	            	The syntax of the tag libraries is very similar to NickScript tags: <code>&lt;prefix:Tag&gt;</code>. That means that we can imagine re-implement NickScript
	            	tags in Java, as tag libs, thus keeping a near-compatibility with existing form files.
	            </member>
	        </simplelist>

			Cons:
			<simplelist>
				<member>It ties us to the server side, and to Java only,</member>
				<member>
					It's difficult to get Jetty to compile a JSP which is outside of it's deployment directory, which is our use case since
					the form files reside in each collection <literal>conf/</literal> directory. This mean that we have to copy the form
					files on-the-fly into the Jetty deployment directory to have them compiled, and detect any change in the form file to
					re-copy them. That's not especially difficult, but a bit more complex.
				</member>
			</simplelist>
			
			 But the major drawback of JSP is the security: Like Perl it allows execution of arbitrary Java code, including file access code.
			 It can be even worse because if there is any fatal error it could crash the whole JVM, including Jetty.
		</para>
	
	    <para>
	        The JVM provide a <emphasis>Security Manager</emphasis> to restrict permissions of certain classes. However it's difficult to setup because
	        some parts of the Public UI needs access to those permissions (Reading / writing files, reading environment variables, etc). A fine-grained configuration
	        is really difficult to achieve reliably. 
	    </para>
	    
	    <para>For these reasons I gave up on making a complete POC with JSP as it didn't seem a sensible solution.</para>
	</section>
		
	<section>
		<title>Sample template</title>
		<para>
			<programlisting language="jsp"><xi:include href="template.jsp" parse="text" /></programlisting>
		</para>
	</section>
	
</chapter>
